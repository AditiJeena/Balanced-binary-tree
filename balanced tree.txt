#include<iostream>

using namespace std;

struct node
{
    int key;
    struct node *left,*right;
};
typedef struct node node;
node* createnode(int data)
{
    node* newnode=new node;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
int height(node* root)
{
    if(root==NULL)
    {
        return 0;
    }

    int lh=height(root->left);

    if(lh==-1)
    {
        return -1;
    }
    int rh=height(root->right);

    if(rh==-1)
    {
        return -1;
    }

    if(abs(lh-rh)>1)
    {
        return -1;
    }
    return max(lh,rh)+1;
}

bool isbalance(node* root)
{
    return height(root)!=-1;
}
int main()
{
    node *root=createnode(5);
    root->left=createnode(2);
    root->right=createnode(1);
    root->left->right=createnode(10);
    root->right->left=createnode(3);
    root->right->left->left=createnode(8);
    root->right->left->right=createnode(11);
    root->right->right=createnode(4);

    if(isbalance(root))
    {
        cout<<"Balanced Tree"<<endl;
    }
    else
    {
        cout<<"Not a balanced tree"<<endl;
    }
    return 0;
}